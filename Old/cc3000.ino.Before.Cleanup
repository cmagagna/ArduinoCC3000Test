#include <SPI.h>


#define WLAN_CS		2	// -> CC3000 WL_SPI_CS pin
#define WLAN_IRQ	3	// -> CC3000 WL_SPI_IRQ pin
#define WLAN_ENABLE	4	// -> CC3000 vBAT_SW_EN

#define MOSI		11
#define MISO		12
#define SCK			13



#define USE_HARDWARE_SPI	0




#define LED1	5
#define LED2	6
#define LED3	7
#define LED4	8
#define LED5	9
#define LED6	10
#define LED7	14
#define LED8	15






byte SPIPump(byte data) {
	if (USE_HARDWARE_SPI) {
		return(SPI.transfer(data));
		}
		
	//Serial.print("Sending ");
	//Serial.print(data, HEX);
	//Serial.print(" (");
	
	byte receivedData=0;
	
	for (int i=7; i>=0; i--) {
	
		//Serial.print("i=");
		//Serial.print(i);
		//Serial.print(", mask=");
		//Serial.println((1<<i), BIN);
	
		receivedData <<= 1;
	
		if (data & (1<<i)) {
			digitalWriteFast(MOSI, HIGH);
			//Serial.print("1");
			}
		else {
			digitalWriteFast(MOSI, LOW);
			//Serial.print("0");
			}
			
		digitalWriteFast(SCK, HIGH);
		delayMicroseconds(1);
			
		digitalWriteFast(SCK, LOW);
		
		if (digitalReadFast(MISO)) {
			receivedData |= 1;
			}
		
		delayMicroseconds(1);
		
		}
	
	//Serial.println(")");
	//Serial.print("Returning ");
	//Serial.println(receivedData, HEX);
		
	return(receivedData);
	}






void setup(void) {

	Serial.begin(57600);

	if (USE_HARDWARE_SPI) {
		SPI.begin();
		SPI.setDataMode(SPI_MODE1);
		SPI.setBitOrder(MSBFIRST);
		SPI.setClockDivider(SPI_CLOCK_DIV2);
		}
	else {
		pinMode(MOSI, OUTPUT);
		digitalWrite(MOSI, LOW);
		
		pinMode(SCK, OUTPUT);
		digitalWrite(SCK, LOW);
		
		pinMode(MISO, INPUT_PULLUP);
		}

	pinMode(WLAN_CS, OUTPUT);
	digitalWrite(WLAN_CS, HIGH);	// turn off CS on powerup
	pinMode(WLAN_IRQ, INPUT_PULLUP);
	
	pinMode(LED1, OUTPUT);
	pinMode(LED2, OUTPUT);
	pinMode(LED3, OUTPUT);
	pinMode(LED4, OUTPUT);
	pinMode(LED5, OUTPUT);
	pinMode(LED6, OUTPUT);
	pinMode(LED7, OUTPUT);
	pinMode(LED8, OUTPUT);
	
	
	Serial.println("Starting out. Waiting for you. Waiting for you");
	do {
		Serial.println("Waiting for you before starting...");
		delay(1000);
		} while (!Serial.available());
	Serial.read();
		
	// Say we're starting out
	digitalWrite(LED1, HIGH);
	
	// WLAN_ENABLE is still high Z, so the CC3000 should be shut off. Confirm this by
	// making sure WLAN_IRQ is high (via the internal pullup)
	while (digitalRead(WLAN_IRQ)!=HIGH);
	
	// Initial state OK
	digitalWrite(LED2, HIGH);
	
	// Turn the CC3000 on
	pinMode(WLAN_ENABLE, OUTPUT);
	digitalWrite(WLAN_ENABLE, HIGH);
	
	// Signal we've turned on the CC3000
	digitalWrite(LED3, HIGH);
	
	// Now wait until WLAN_IRQ goes low, which means the CC3000 has booted
	while (digitalRead(WLAN_IRQ)!=LOW);
	
	// Signal we saw the initial low pulse on IRQ from the CC3000
	digitalWrite(LED4, HIGH);
	
	// TI says we now set CS low, wait 50 microseconds, send the first 4 bytes,
	// wait another 50 microseconds, then send the rest of the bytes
	
	digitalWrite(WLAN_CS, LOW);
	delayMicroseconds(50);
	
	// We waited 50 microseconds
	digitalWrite(LED5, HIGH);
	
	byte buffer1 [10];
	buffer1[0] = SPIPump(1);	// Host write
	buffer1[1] = SPIPump(0);	// # of bytes to write MSB
	buffer1[2] = SPIPump(5);	// # of bytes to write LSB
	buffer1[3] = SPIPump(0);	// padding byte 1
	delayMicroseconds(50);
	buffer1[4] = SPIPump(0);	// padding byte 2
	buffer1[5] = SPIPump(1);	// HCI header - type command
	buffer1[6] = SPIPump(0);	// HCI header - opcode MSB
	buffer1[7] = SPIPump(0x40);	// HCI header - opcode LSB
	buffer1[8] = SPIPump(1);	// HCI header - args length MSB
	buffer1[9] = SPIPump(0); 	// HCI header - args length LSB
	
	// We're done writing the string, so we can set CS back to high
	digitalWrite(WLAN_CS, HIGH);
	
	// Signal we've sent the first packet
	digitalWrite(LED6, HIGH);
	
	// Now wait for the CC3000 to set WLAN_IRQ high, meaning it ack'd the first packet
	while(digitalRead(WLAN_IRQ)!=HIGH);
	
	// Signal we saw IRQ go high
	digitalWrite(LED7, HIGH);
	
	// Now wait for the CC3000 to set WLAN_IRQ low, meaning it wants to send us data
	while(digitalRead(WLAN_IRQ)!=LOW);
	
	// Signal we saw IRQ go low
	digitalWrite(LED8, HIGH);
	
	// Read the data from the CC 3000
	
	digitalWrite(WLAN_CS, LOW);
	
	#define READNUM	10
	byte buffer[READNUM];
	for (int i=0; i<READNUM; i++) {
		buffer[i] = SPIPump(3);
		}
	
	digitalWrite(WLAN_CS, HIGH);
	
	// turn off 8 to show we're waiting for IRQ again
	digitalWrite(LED8, LOW);
	
	// Wait for WLAN_IRQ to go high again, meaning it's done sending data
	while(digitalRead(WLAN_IRQ)!=HIGH);
	
	// Signal we saw the CC3000 is finished sending data
	digitalWrite(LED8, HIGH);
	
	// Finally, print out what we got
	
	Serial.print("First packet data: ");
	for (int i=0; i<10; i++) {
		Serial.print(buffer1[i], HEX);
		Serial.print(" ");
		}
	Serial.println();
	
	Serial.print("Wlan sent me: ");
	for (int i=0; i<READNUM; i++) {
		Serial.print(buffer[i], HEX);
		Serial.print(" ");
		}
	Serial.println();	
		
	}





void loop(void) {
	}