#include <SPI.h>


//#define WLAN_CS		2	// -> CC3000 WL_SPI_CS pin
//#define WLAN_IRQ	3	// -> CC3000 WL_SPI_IRQ pin
//#define WLAN_ENABLE	4	// -> CC3000 vBAT_SW_EN


#define WLAN_CS		10	// -> CC3000 WL_SPI_CS pin
#define WLAN_IRQ	3	// -> CC3000 WL_SPI_IRQ pin
#define WLAN_ENABLE	9	// -> CC3000 vBAT_SW_EN





/*
#define LED1	5
#define LED2	6
#define LED3	7
#define LED4	8
#define LED5	9
#define LED6	10
#define LED7	14
#define LED8	15
*/

#define LED1	4
#define LED2	4
#define LED3	4
#define LED4	4
#define LED5	4
#define LED6	4
#define LED7	4
#define LED8	4



void setup(void) {

	Serial.begin(57600);

	SPI.begin();
	SPI.setDataMode(SPI_MODE1);
	SPI.setBitOrder(MSBFIRST);
	SPI.setClockDivider(SPI_CLOCK_DIV2);

	pinMode(WLAN_CS, OUTPUT);
	pinMode(WLAN_IRQ, INPUT_PULLUP);
	pinMode(WLAN_ENABLE, OUTPUT);
	
	//pinMode(12, INPUT_PULLUP);
	
	pinMode(LED1, OUTPUT);
	pinMode(LED2, OUTPUT);
	pinMode(LED3, OUTPUT);
	pinMode(LED4, OUTPUT);
	pinMode(LED5, OUTPUT);
	pinMode(LED6, OUTPUT);
	pinMode(LED7, OUTPUT);
	pinMode(LED8, OUTPUT);
		
	}





void loop(void) {

	Serial.println("Starting out phase 1. Waiting for you");
	do {} while (!Serial.available());
	Serial.read();
	
	digitalWrite(LED1, LOW);
	digitalWrite(LED2, LOW);
	digitalWrite(LED3, LOW);
	digitalWrite(LED4, LOW);
	digitalWrite(LED5, LOW);
	digitalWrite(LED6, LOW);
	digitalWrite(LED7, LOW);
	digitalWrite(LED8, LOW);
	digitalWrite(WLAN_ENABLE, LOW);	
	
	Serial.println("Starting out phase 2. Waiting for you");
	do {} while (!Serial.available());
	Serial.read();
	
	// Say we're starting out
	digitalWrite(LED1, HIGH);
	
	digitalWrite(WLAN_ENABLE, LOW);	
	while (digitalRead(WLAN_IRQ)!=HIGH);
	
	// Initial state - IRQ is high because the CC3000 has no power
	digitalWrite(LED2, HIGH);
	
	digitalWrite(WLAN_ENABLE, HIGH);
	
	// Power up the CC3000
	digitalWrite(LED3, HIGH);
	
	while (digitalRead(WLAN_IRQ)!=LOW);
	
	// We saw the initial low pulse on IRQ from the CC3000
	digitalWrite(LED4, HIGH);
	
	digitalWrite(WLAN_CS, LOW);
	delayMicroseconds(50);
	
	// We waited 50 microseconds
	digitalWrite(LED5, HIGH);
	
	byte buffer1 [10];
	buffer1[0] = SPI.transfer(1);	// Host write
	buffer1[1] = SPI.transfer(0);	// # of bytes to write MSB
	buffer1[2] = SPI.transfer(5);	// # of bytes to write LSB
	buffer1[3] = SPI.transfer(0);	// padding byte 1
	delayMicroseconds(50);
	buffer1[4] = SPI.transfer(0);	// padding byte 2
	buffer1[5] = SPI.transfer(1);	// HCI header - type command
	buffer1[6] = SPI.transfer(0);	// HCI header - opcode MSB
	buffer1[7] = SPI.transfer(0x40);	// HCI header - opcode LSB
	buffer1[8] = SPI.transfer(1);	// HCI header - args length MSB
	buffer1[9] = SPI.transfer(0); 	// HCI header - args length LSB
	digitalWrite(WLAN_CS, HIGH);
	
	// We're done sending the initial string and now going to wait for IRQ to go high again
	digitalWrite(LED6, HIGH);
	
	while(digitalRead(WLAN_IRQ)!=HIGH);
	
	// IRQ went high
	digitalWrite(LED7, HIGH);
	
	while(digitalRead(WLAN_IRQ)!=LOW);
	
	// And went back to low, indicating the CC3000 wants to send us some data
	digitalWrite(LED8, HIGH);
	
	digitalWrite(WLAN_CS, LOW);
	
	#define READNUM	10
	byte buffer[READNUM];
	for (int i=0; i<READNUM; i++) {
		buffer[i] = SPI.transfer(3);
		}
	
	digitalWrite(WLAN_CS, HIGH);
	
	// turn off 8 to show we're waiting for IRQ again
	digitalWrite(LED8, LOW);
	
	while(digitalRead(WLAN_IRQ)!=HIGH);
	
	// we got back data.
	digitalWrite(LED8, HIGH);
	
	Serial.print("First packet data: ");
	for (int i=0; i<10; i++) {
		Serial.print(buffer1[i], HEX);
		Serial.print(" ");
		}
	Serial.println();
	
	Serial.print("Wlan sent me: ");
	for (int i=0; i<READNUM; i++) {
		Serial.print(buffer[i], HEX);
		Serial.print(" ");
		}
	Serial.println();
	
	
	}